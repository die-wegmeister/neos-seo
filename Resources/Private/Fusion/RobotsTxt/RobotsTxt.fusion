prototype(Neos.Seo:RobotsTxt) < prototype(Neos.Fusion:Component) {
    // Every entry gets a line in the robots.txt
    data = Neos.Fusion:DataStructure {
        userAgentAll = 'User-agent: *'
        userAgentAll.@position = 'start'
        disallowNeos = 'Disallow: /neos/'
        disallowNeos.@position = 'after userAgentAll'
    }
    renderXMLSitemapLinks = true
    languageDimension = 'language'
    dimensionsPresets = ${Configuration.setting('Neos.Seo.robotsTxt.dimensionsPresets')}
    excludedDimensionPresets = ${Configuration.setting('Neos.Seo.robotsTxt.excludedDimensionsPresets')}
    linebreak = ${String.chr(10)}

    @private.sitemaps = Neos.Fusion:Case {
        @if.shouldRender = ${props.renderXMLSitemapLinks}
        hasLanguage {
            condition = ${props.languageDimension && Neos.Dimension.currentValue(site, props.languageDimension) != null}

            renderer = Neos.Fusion:Loop {
                items = ${Neos.Dimension.allDimensionValues(site, props.languageDimension)}
                itemName = 'dimensionValue'
                itemRenderer = Neos.Neos:NodeUri {
                    absolute = true
                    format = 'xml.sitemap'
                    node = ${Neos.Dimension.findVariantInDimension(site, props.languageDimension, dimensionValue)}
                    @process.prefix = ${'Sitemap: ' + value + props.linebreak}
                    @if.isIncluded = ${!props.dimensionsPresets || Array.indexOf(props.dimensionsPresets, dimensionValue.value) != -1}
                    @if.notExcluded = ${!props.excludedDimensionPresets || Array.indexOf(props.excludedDimensionPresets, dimensionValue.value) == -1}
                }
            }
        }
        noLanguage {
            condition = true
            renderer = Neos.Neos:NodeUri {
                absolute = true
                format = 'xml.sitemap'
                node = ${site}
                @process.prefix = ${'Sitemap: ' + value}
            }
        }
        @process.prefix = ${props.linebreak + value}
    }

    renderer = Neos.Fusion:Http.Message {
        httpResponseHead.headers.Content-Type = 'text/plain;'
        body = afx`
            <Neos.Fusion:Loop items={props.data}>
                {item}{props.linebreak}
            </Neos.Fusion:Loop>
            {private.sitemaps}
        `
    }

    @cache {
        mode = 'cached'
        entryIdentifier.identifier = 'robots.txt'
    }
}

root.robotsTxt {
    condition = ${request.format == 'txt.robots'}
    renderer = Neos.Seo:RobotsTxt
}
