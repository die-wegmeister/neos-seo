prototype(Neos.Seo:AlternateLanguageLinks) < prototype(Neos.Fusion:Component) {
    @if.onlyRenderWhenInLiveWorkspace = ${Neos.Node.isLive(this.node)}
    @if.languageDimensionExists = ${this.languageDimension}
    @if.hasNoForeignCanonical = ${String.isBlank(q(this.node).property('canonicalLink'))}

    node = ${documentNode}
    dimension = 'language'
    languageDimension = ${Neos.Dimension.all(this.node)[this.dimension]}
    excludedPresets = ${[]}

    # The hreflang value needs to have a format like 'en-US', therefore internally used values
    # like 'en_US' will be modified to match.
    dimensionValueSeparator = '_'

    renderer = Neos.Fusion:Loop {
        items = ${props.languageDimension.values.values}
        itemName = 'dimensionValue'
        # First root value is used as default language
        iterationName = 'iteration'
        itemRenderer = Neos.Fusion:Component {
            @if.variantExists = ${this.node}
            @if.indexingAllowed = ${q(this.node).property('metaRobotsNoindex') != true}
            @if.notExcluded = ${!props.excludedPresets || Array.indexOf(props.excludedPresets, dimensionValue.value) == -1}

            node = ${Neos.Dimension.findVariantInDimension(props.node, props.dimension, dimensionValue)}
            dimensionValueSeparator = ${props.dimensionValueSeparator}

            renderer = afx`
                <Neos.Seo:AlternateLanguageLink @key="defaultLink" node={props.node} hreflang="x-default"
                                                @if.isFirst={iteration.isFirst}/>
                <Neos.Seo:AlternateLanguageLink node={props.node}
                    hreflang={String.replace(dimensionValue.value, props.dimensionValueSeparator, '-')}/>
            `
        }
    }
}
